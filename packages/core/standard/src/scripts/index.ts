import * as fs from 'node:fs'
import * as path from 'node:path'
import { fileURLToPath } from 'node:url'
// SCRIPTS
import generateDefinitionConstant from './generate-definition-constant'
// MODULES
import * as ed2Modules from '../ed2'

//====== INITIALIZATION ======//

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const rawDefinitions: Record<
	string,
	Record<string, string | Record<string, string>>
> = {}

const editionModules = {
	ed2: ed2Modules
} as const

//====== HELPERS ======//

function generatedDefinitionFileContent(result: Record<string, unknown>) {
	return `
/**
 * This file is automatically generated. Do not edit it directly.
 * Last generated on ${new Date().toISOString()}
 */

const generated = ${JSON.stringify(result, null, 2).replace(/"([^"]+)":/g, '$1:')} as const;

export default generated;`
}

let importStatements = ''
let innerAvailableRevisionsPerEditions = ''
let innerDefinitionsConstant = ''
function generatedDefinitionsConstantFileContent() {
	return `
/**
 * This file is automatically generated. Do not edit it directly.
 * Last generated on ${new Date().toISOString()}
 */

${importStatements}

export const AVAILABLE_REVISIONS_PER_EDITIONS = {
${innerAvailableRevisionsPerEditions}
} as const;

export const IEC61850_DEFINITIONS = {
${innerDefinitionsConstant}
} as const;
`
}

function writeResultToFile(filename: string, fileContent: string) {
	const dirPath = path.resolve(__dirname, '../generated')
	if (!fs.existsSync(dirPath)) {
		fs.mkdirSync(dirPath, { recursive: true })
	}
	const filePath = path.join(dirPath, filename)

	fs.writeFileSync(filePath, fileContent)

	console.log(`
##################################################
## ${filename} has been written to 
## ./${dirPath.split('/').slice(-6).join('/')}
##################################################
`)
}

function getCurrentDefinitionPath(
	edition: string,
	revision: string,
	state: string,
	unstableDefinition?: string
) {
	return path.resolve(
		__dirname,
		`../${edition}/${revision}/${state}${unstableDefinition ? `/${unstableDefinition}` : ''}/definition/index.ts`
	)
}

//====== GENERATE FUNCTIONS ======//

function generateDefinitionsFiles() {
	for (const [editionKey, currentRevisionModules] of Object.entries(
		editionModules
	)) {
		let currentStableDefinitionPath = ''
		for (const [revisionKey, currentStateModules] of Object.entries(
			currentRevisionModules
		)) {
			const currentVersion = `${editionKey}${revisionKey.charAt(0).toUpperCase() + revisionKey.slice(1)}`
			if (!rawDefinitions[currentVersion])
				rawDefinitions[currentVersion] = {}

			innerAvailableRevisionsPerEditions += `	${currentVersion}:		[\n`
			innerDefinitionsConstant += `	${currentVersion}: {\n`

			for (const [stateKey, currentDefinition] of Object.entries(
				currentStateModules
			)) {
				if (!rawDefinitions[currentVersion][stateKey])
					rawDefinitions[currentVersion][stateKey] = {}

				// STABLE EDITION
				if (stateKey === 'stable') {
					currentStableDefinitionPath = getCurrentDefinitionPath(
						editionKey,
						revisionKey,
						stateKey
					)

					const result = generateDefinitionConstant({
						stableSourcePath: currentStableDefinitionPath
					})

					const fileContent = generatedDefinitionFileContent(result)
					const filename = `${currentVersion}.generated.ts`
					writeResultToFile(filename, fileContent)

					importStatements += `import DEFINITION_${currentVersion} from './${currentVersion}.generated'\n`
					innerDefinitionsConstant += `		stable: DEFINITION_${currentVersion},\n`

					continue
				}
				// UNSTABLE REVISION
				innerDefinitionsConstant += '		unstable: {\n'
				for (const currentUnstableDefinitionKey of Object.keys(
					currentDefinition
				)) {
					const formattedCurrentUnstableDefinitionKey =
						currentUnstableDefinitionKey.replace(/_/g, '-')

					const currentUnstableDefinitionPath =
						getCurrentDefinitionPath(
							editionKey,
							revisionKey,
							stateKey,
							formattedCurrentUnstableDefinitionKey
						)

					const result = generateDefinitionConstant({
						stableSourcePath: currentStableDefinitionPath,
						unstableSourcePath: currentUnstableDefinitionPath
					})

					const fileContent = generatedDefinitionFileContent(result)
					const filename = `${formattedCurrentUnstableDefinitionKey}.generated.ts`
					writeResultToFile(filename, fileContent)

					importStatements += `import DEFINITION_${currentUnstableDefinitionKey} from './${formattedCurrentUnstableDefinitionKey}.generated'\n`
					innerDefinitionsConstant += `			'${formattedCurrentUnstableDefinitionKey}': DEFINITION_${currentUnstableDefinitionKey},\n`
					innerAvailableRevisionsPerEditions += `			'${formattedCurrentUnstableDefinitionKey}',\n`
				}
				innerAvailableRevisionsPerEditions += '		],\n'
				innerDefinitionsConstant += '		},\n'
			}
			innerDefinitionsConstant += '	},\n'
		}
	}
}

function generateDefinitionsConstant() {
	const fileContent = generatedDefinitionsConstantFileContent()
	const filename = 'definitions.generated.ts'
	writeResultToFile(filename, fileContent)
}

//====== EXECUTION ======//

generateDefinitionsFiles()
generateDefinitionsConstant()
